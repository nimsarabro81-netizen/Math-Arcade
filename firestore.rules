/**
 * @fileoverview Firestore Security Rules for the VectorZen application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and ranking data.
 * Each user can only access their own profile and ranking information.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information.
 * - `/users/{userId}/userRanks/{userRankId}`: Stores user ranking data, nested under each user's profile.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by not providing a rule for it.
 * - All writes are validated against the authenticated user's ID.
 * - No schema validation is performed beyond essential authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with matching {userId} can create their own profile.
     * @allow (get, update, delete) - User with matching {userId} can read, update, and delete their own profile.
     * @deny (create) - User cannot create a profile with a mismatched {userId}.
     * @deny (update, delete) - User cannot update or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user ranking data within a user's subcollection.
     * @path /users/{userId}/userRanks/{userRankId}
     * @allow (create) - User with matching {userId} can create their own rank.
     * @allow (get, update, delete) - User with matching {userId} can read, update, and delete their own rank.
     * @deny (create) - User cannot create a rank with a mismatched {userId}.
     * @deny (update, delete) - User cannot update or delete another user's rank.
     * @principle Enforces document ownership for user ranking data.
     */
    match /users/{userId}/userRanks/{userRankId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}