/**
 * @fileoverview Firestore Security Rules for VectorZen and Algebra Arena.
 *
 * Core Philosophy:
 * This ruleset prioritizes data protection by restricting write access. Read access is generally public to support leaderboard functionality.
 *
 * Data Structure:
 * - `/userRanks`: Stores VectorZen leaderboard data. Publicly readable, but only the application itself can modify.
 * - `/algebraRanks`: Stores Algebra Arena leaderboard data. Publicly readable, but only the application itself can modify.
 * - `/equationRanks`: Stores Equation Equilibrium leaderboard data. Publicly readable, but only the application itself can modify.
 * - `/gameSettings`: Stores game settings. Publicly readable, but only the application itself can modify.
 *
 * Key Security Decisions:
 * - Leaderboard data (ranks) is publicly readable to allow display of rankings.
 * - Only authenticated application (via backend) can modify any documents.
 * - No user-specific data trees requiring ownership checks are implemented.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization needed in this version.
 *
 * Structural Segregation:
 * N/A - No separation of public/private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read user ranks, but restricts modifications to authenticated users (backend).
     * @path /userRanks
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, authenticated-only writes.
     */
    match /userRanks/{userRankId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

        /**
         * @description Allows anyone to read algebra ranks, but restricts modifications to authenticated users (backend).
         * @path /algebraRanks
         * @allow (get, list): if true
         * @allow (create, update, delete): if isSignedIn()
         * @deny (create, update, delete): if !isSignedIn()
         * @principle Public read, authenticated-only writes.
         */
        match /algebraRanks/{algebraRankId} {
          allow get, list: if true;
          allow create: if isSignedIn();
          allow update: if isSignedIn() && resource != null;
          allow delete: if isSignedIn() && resource != null;
        }

    /**
     * @description Allows anyone to read equation ranks, but restricts modifications to authenticated users (backend).
     * @path /equationRanks
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, authenticated-only writes.
     */
    match /equationRanks/{equationRankId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read game settings, but restricts modifications to authenticated users (backend).
     * @path /gameSettings
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn()
     * @deny (create, update, delete): if !isSignedIn()
     * @principle Public read, authenticated-only writes.
     */
    match /gameSettings/{gameSettingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

}