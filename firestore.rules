/**
 * @fileoverview Firestore Security Rules for VectorZen app.
 *
 * Core Philosophy:
 * This ruleset provides public read access to user rankings (`/userRanks`) while restricting write access. Only authenticated users can create/update/delete their own rank.
 *
 * Data Structure:
 * The primary data structure is a flat collection of `/userRanks` documents.  Each document represents a user's ranking information.
 *
 * Key Security Decisions:
 * - User ranks are publicly listable to enable leaderboards and other features.
 * - Only authenticated users can create, update, and delete their own rank.
 * - Data validation is relaxed to facilitate rapid prototyping, but ownership is strictly enforced.
 * - No user listing is possible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to user ranks and restricts write access to authenticated users.
     * @path /userRanks
     * @allow (get, list) Allows anyone to read user ranks.
     * @allow (create) Allows authenticated user to create their rank if userId matches their auth.uid.
     * @allow (update, delete) Allows an authenticated user to update/delete their own rank, if userId matches their auth.uid.
     * @deny (create, update, delete) Denies unauthenticated requests for creating, updating, or deleting ranks.
     * @deny (create, update, delete) Denies authenticated requests for updating or deleting ranks that don't belong to the user.
     * @principle Allows anyone to read, but only owners can write.
     */
    match /userRanks/{userRankId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);

    }

    // Define helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}